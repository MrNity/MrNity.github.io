
const clamp = (x, min, max) => Math.min(Math.max(x, min), max);

/**
 * –†–∞—Å—á–µ—Ç —É–¥–∞—á–∏ –¥–ª—è Genshin/HSR/ZZZ
 * @param {number} WR - –í–∏–Ω—Ä–µ–π—Ç –∏–≥—Ä–æ–∫–∞
 * @param {number} AvgL - –°—Ä–µ–¥–Ω—è—è –ª–µ–≥–∞ –∏–≥—Ä–æ–∫–∞
 * @param {number} N - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫
 * @param {number} WR_avg - –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –≤–∏–Ω—Ä–µ–π—Ç
 * @param {number} AvgL_avg - –≠—Ç–∞–ª–æ–Ω–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è –ª–µ–≥–∞
 * @param {number} N0 - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫ –¥–ª—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏
 */
function calcLuck(WR, AvgL, N, WR_avg, AvgL_avg, N0) {
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ (–æ—Ç 0 –¥–æ 1)
  const confidence = Math.min(1, Math.sqrt(N / N0));

  // –§–∞–∫—Ç–æ—Ä –≤–∏–Ω—Ä–µ–π—Ç–∞: –±–æ–ª—å—à–µ –≤–∏–Ω—Ä–µ–π—Ç = –±–æ–ª—å—à–µ —É–¥–∞—á–∏
  const wrFactor = (WR - WR_avg) / WR_avg;

  // –§–∞–∫—Ç–æ—Ä —Å—Ä–µ–¥–Ω–µ–π –ª–µ–≥–∏: –º–µ–Ω—å—à–µ —Å—Ä–µ–¥–Ω—è—è = –±–æ–ª—å—à–µ —É–¥–∞—á–∏
  const avgFactor = (AvgL_avg - AvgL) / AvgL_avg;

  // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã —Å –≤–µ—Å–∞–º–∏: –≤–∏–Ω—Ä–µ–π—Ç 0.6, —Å—Ä–µ–¥–Ω—è—è –ª–µ–≥–∞ 0.8
  const luckRaw = (wrFactor * 6.1 + avgFactor * 0.9) * confidence;

  // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫ —à–∫–∞–ª–µ 0-100 —Å —Ü–µ–Ω—Ç—Ä–æ–º –≤ 50
  const luck = 50 + luckRaw * 50;

  return clamp(luck, 0, 100);
}

/**
 * –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —É–¥–∞—á–∏ –¥–ª—è Genshin/HSR/ZZZ
 */
function totalLuck(dataChar, dataWeap) {
  const Lc = calcLuck(dataChar.WR, dataChar.AvgL, dataChar.N, 50, 75, 10000);
  const Lw = calcLuck(dataWeap.WR, dataWeap.AvgL, dataWeap.N, 75, 65, 4000);

  // –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫—Ä—É—Ç–æ–∫
  const total = (Lc * dataChar.N + Lw * dataWeap.N) / (dataChar.N + dataWeap.N);
  return clamp(total, 0, 100);
}

/**
 * –†–∞—Å—á–µ—Ç —É–¥–∞—á–∏ –¥–ª—è WW
 * @param {number} AvgL - –°—Ä–µ–¥–Ω—è—è –ª–µ–≥–∞ –∏–≥—Ä–æ–∫–∞
 * @param {number} N - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫
 * @param {number} AvgL_avg - –≠—Ç–∞–ª–æ–Ω–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è –ª–µ–≥–∞
 * @param {number} N0 - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫ –¥–ª—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏
 * @param {number|null} WR - –í–∏–Ω—Ä–µ–π—Ç (–¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞)
 * @param {number|null} WR_avg - –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –≤–∏–Ω—Ä–µ–π—Ç
 */
function calcLuckWW(AvgL, N, AvgL_avg, N0, WR = null, WR_avg = null) {
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏
  const confidence = Math.min(1, Math.sqrt(N / N0));

  // –§–∞–∫—Ç–æ—Ä —Å—Ä–µ–¥–Ω–µ–π –ª–µ–≥–∏
  const avgFactor = (AvgL_avg - AvgL) / AvgL_avg;

  let luckRaw = avgFactor * 0.7; // –í–µ—Å —Å—Ä–µ–¥–Ω–µ–π –ª–µ–≥–∏ 0.7

  // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–Ω—Ä–µ–π—Ç (–ø–µ—Ä—Å–æ–Ω–∞–∂–Ω—ã–π –±–∞–Ω–Ω–µ—Ä)
  if (WR !== null && WR_avg !== null) {
    const wrFactor = (WR - WR_avg) / WR_avg;
    luckRaw = avgFactor * 5.0 + wrFactor * 0.9; // –í–∏–Ω—Ä–µ–π—Ç 0.5, —Å—Ä–µ–¥–Ω—è—è 0.7
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
  luckRaw *= confidence;
  const luck = 50 + luckRaw * 50;

  return clamp(luck, 0, 100);
}

/**
 * –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —É–¥–∞—á–∏ –¥–ª—è WW
 */
function totalLuckWW(dataChar, dataWeap) {
  // –ü–µ—Ä—Å–æ–Ω–∞–∂–Ω—ã–π –±–∞–Ω–Ω–µ—Ä: —ç—Ç–∞–ª–æ–Ω 65 –∫—Ä—É—Ç–æ–∫, –≤–∏–Ω—Ä–µ–π—Ç 50%, N0 = 10000
  const Lc = calcLuckWW(dataChar.AvgL, dataChar.N, 65, 1200, dataChar.WR, 50);

  // –û—Ä—É–∂–µ–π–Ω—ã–π –±–∞–Ω–Ω–µ—Ä: —ç—Ç–∞–ª–æ–Ω 65 –∫—Ä—É—Ç–æ–∫, –±–µ–∑ –≤–∏–Ω—Ä–µ–π—Ç–∞, N0 = 2000
  const Lw = calcLuckWW(dataWeap.AvgL, dataWeap.N, 65, 1200);

  // –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
  const total = (Lc * dataChar.N + Lw * dataWeap.N) / (dataChar.N + dataWeap.N);
  return clamp(total, 0, 100);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Genshin/HSR/ZZZ
document.getElementById('calculate').addEventListener('click', () => {
  const pullsChar = parseFloat(document.getElementById('charPulls').value);
  const winrateChar = parseFloat(document.getElementById('charWinrate').value);
  const avgChar = parseFloat(document.getElementById('charAvg').value);

  const pullsWeap = parseFloat(document.getElementById('weapPulls').value);
  const winrateWeap = parseFloat(document.getElementById('weapWinrate').value);
  const avgWeap = parseFloat(document.getElementById('weapAvg').value);

  if (!pullsChar || isNaN(winrateChar) || !avgChar || !pullsWeap || isNaN(winrateWeap) || !avgWeap) {
    document.getElementById('result').textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.';
    return;
  }

  const dataChar = { N: pullsChar, AvgL: avgChar, WR: winrateChar };
  const dataWeap = { N: pullsWeap, AvgL: avgWeap, WR: winrateWeap };
  const score = totalLuck(dataChar, dataWeap);
  document.getElementById('result').textContent = `${graduateScore(score)}: ${score.toFixed(1)}/100`;
});

document.getElementById('reset').addEventListener('click', () => {
  ['charPulls', 'charWinrate', 'charAvg', 'weapPulls', 'weapWinrate', 'weapAvg'].forEach(id => {
    document.getElementById(id).value = '';
  });
  document.getElementById('result').textContent = '';
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è WW
document.getElementById('calculateWW').addEventListener('click', () => {
  const pullsChar = parseFloat(document.getElementById('charPullsWW').value);
  const winrateChar = parseFloat(document.getElementById('charWinrateWW').value);
  const avgChar = parseFloat(document.getElementById('charAvgWW').value);
  const pullsWeap = parseFloat(document.getElementById('weapPullsWW').value);
  const avgWeap = parseFloat(document.getElementById('weapAvgWW').value);

  if (!pullsChar || isNaN(winrateChar) || !avgChar || !pullsWeap || !avgWeap) {
    document.getElementById('result-ww').textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.';
    return;
  }

  const dataChar = { N: pullsChar, AvgL: avgChar, WR: winrateChar };
  const dataWeap = { N: pullsWeap, AvgL: avgWeap };
  const score = totalLuckWW(dataChar, dataWeap);
  document.getElementById('result-ww').textContent = `${graduateScore(score)}: ${score.toFixed(1)}/100`;
});

document.getElementById('resetWW').addEventListener('click', () => {
  ['charPullsWW', 'charWinrateWW', 'charAvgWW', 'weapPullsWW', 'weapAvgWW'].forEach(id => {
    document.getElementById(id).value = '';
  });
  document.getElementById('result-ww').textContent = '';
});

function graduateScore(score) {
  if (score < 0 || score > 100 || isNaN(score)) {
    return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—á–µ—Ç üòï";
  }
  if (score <= 15) {
    return "–ß–µ–ª–æ–≤–µ–∫ —Å –ø—Ä–æ–∫–ª—è—Ç–∏–µ–º üò£";
  } else if (score <= 30) {
    return "–°–∏–ª—å–Ω—ã–π –∞–Ω–ª–∞–∫–µ—Ä üòû";
  } else if (score <= 60) {
    return "–û–±—ã—á–Ω—ã–π –∏–≥—Ä–æ–∫ üòê";
  } else if (score <= 90) {
    return "–°–≤–∏–Ω—å—è üê∑";
  } else {
    return "–ü—Ä–æ–∫–ª—è—Ç–æ–µ —Å–≤–∏–Ω—Å—Ç–≤–æ üòà";
  }
}
