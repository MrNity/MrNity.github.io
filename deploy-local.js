const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π sleep-tracker...');

try {
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ–±–∏—Ä–∞–µ–º
  console.log('üì¶ –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...');
  process.chdir('./dev/sleep-tracker');
  execSync('npm run build', { stdio: 'inherit' });
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–µ–Ω—å
  process.chdir('../../');
  
  // –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É sleeptracker (–∫—Ä–æ–º–µ .gitkeep)
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ sleeptracker...');
  const sleeptrackerDir = './sleeptracker';
  const files = fs.readdirSync(sleeptrackerDir);
  files.forEach(file => {
    if (file !== '.gitkeep') {
      const filePath = path.join(sleeptrackerDir, file);
      const stat = fs.statSync(filePath);
      if (stat.isDirectory()) {
        fs.rmSync(filePath, { recursive: true, force: true });
      } else {
        fs.unlinkSync(filePath);
      }
    }
  });
  
  // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏–∑ dist
  console.log('üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...');
  const distDir = './dev/sleep-tracker/dist';
  const distFiles = fs.readdirSync(distDir);
  
  function copyRecursive(src, dest) {
    const stat = fs.statSync(src);
    if (stat.isDirectory()) {
      if (!fs.existsSync(dest)) {
        fs.mkdirSync(dest, { recursive: true });
      }
      const files = fs.readdirSync(src);
      files.forEach(file => {
        copyRecursive(path.join(src, file), path.join(dest, file));
      });
    } else {
      fs.copyFileSync(src, dest);
    }
  }
  
  distFiles.forEach(file => {
    const srcPath = path.join(distDir, file);
    const destPath = path.join(sleeptrackerDir, file);
    copyRecursive(srcPath, destPath);
  });
  
  console.log('‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω! –§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–∞–ø–∫—É sleeptracker/');
  console.log('üåê –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∫–æ–º–º–∏—Ç–∏—Ç—å –∏ –ø—É—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ:', error.message);
  process.exit(1);
}